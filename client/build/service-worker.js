"use strict";var precacheConfig=[["/index.html","bf927d44e83b560cc0b3aadb68c1b748"],["/static/css/main.35e74953.css","32a411e8ac59a8702e5df864362f09d9"],["/static/js/main.10dc1bff.js","91aeb88dec199f00906be6c7b0bdf77f"],["/static/media/bars.5f25e146.jpg","5f25e146bf4509a1e963082c8cb920c0"],["/static/media/butter.6af4e2a0.jpg","6af4e2a0bee5534687490f98cbc2e659"],["/static/media/cece.15eb763a.png","15eb763a0b8e8431ae0f08b21df0e101"],["/static/media/foamrolling.47887c26.jpg","47887c26945219b052f7946c81642163"],["/static/media/granola.ee330a18.jpg","ee330a18f1da199d584c2097e42834c1"],["/static/media/jack9.d8fcf68a.gif","d8fcf68aec1815d40ccb95437989799e"],["/static/media/kim.b3e35311.png","b3e353110f5a20de02843ee0934320d1"],["/static/media/logo.ee5b6c6b.png","ee5b6c6b5f27210685e04ed12f3fed2d"],["/static/media/maria.bccf9409.gif","bccf9409735561549bdf10b0183a6962"],["/static/media/monitor.a59472a6.jpg","a59472a68ffdb491f56f07e2159ac908"],["/static/media/nourish1.62133367.jpg","6213336794a7d3f4a24ecf7aed24421d"],["/static/media/pranav.ac13c7f4.png","ac13c7f4e78d9aaab1d2b725484f6251"],["/static/media/protein.b523b053.jpg","b523b053e3cf999a5830dfd6615574f5"],["/static/media/sam.9a43fccf.png","9a43fccfd5728462598fb1feeeff71ff"],["/static/media/shakes.329f6186.jpg","329f6186b90f7a1423c3bc2eff8d049e"],["/static/media/sweets.d7a61187.jpg","d7a61187debeb3acab36fed04aaa4bb5"],["/static/media/tracker.4801ced2.png","4801ced2d3a74c5bc3099cdf7c500c2f"],["/static/media/train.1f4ab3a1.jpg","1f4ab3a126bd67fc5aea2b37278f0ad9"],["/static/media/yogaguy1.0e7a3b43.jpg","0e7a3b432bddf2a67c9379cc6a5f6356"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,a){var t=new URL(e);return"/"===t.pathname.slice(-1)&&(t.pathname+=a),t.toString()},cleanResponse=function(a){return a.redirected?("body"in a?Promise.resolve(a.body):a.blob()).then(function(e){return new Response(e,{headers:a.headers,status:a.status,statusText:a.statusText})}):Promise.resolve(a)},createCacheKey=function(e,a,t,n){var c=new URL(e);return n&&c.pathname.match(n)||(c.search+=(c.search?"&":"")+encodeURIComponent(a)+"="+encodeURIComponent(t)),c.toString()},isPathWhitelisted=function(e,a){if(0===e.length)return!0;var t=new URL(a).pathname;return e.some(function(e){return t.match(e)})},stripIgnoredUrlParameters=function(e,t){var a=new URL(e);return a.hash="",a.search=a.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(a){return t.every(function(e){return!e.test(a[0])})}).map(function(e){return e.join("=")}).join("&"),a.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var a=e[0],t=e[1],n=new URL(a,self.location),c=createCacheKey(n,hashParamName,t,/\.\w{8}\./);return[n.toString(),c]}));function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(n){return setOfCachedUrls(n).then(function(t){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(a){if(!t.has(a)){var e=new Request(a,{credentials:"same-origin"});return fetch(e).then(function(e){if(!e.ok)throw new Error("Request for "+a+" returned a response with status "+e.status);return cleanResponse(e).then(function(e){return n.put(a,e)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var t=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(a){return a.keys().then(function(e){return Promise.all(e.map(function(e){if(!t.has(e.url))return a.delete(e)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(a){if("GET"===a.request.method){var e,t=stripIgnoredUrlParameters(a.request.url,ignoreUrlParametersMatching),n="index.html";(e=urlsToCacheKeys.has(t))||(t=addDirectoryIndex(t,n),e=urlsToCacheKeys.has(t));var c="/index.html";!e&&"navigate"===a.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],a.request.url)&&(t=new URL(c,self.location).toString(),e=urlsToCacheKeys.has(t)),e&&a.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(t)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(e){return console.warn('Couldn\'t serve response for "%s" from cache: %O',a.request.url,e),fetch(a.request)}))}});